{"version":3,"sources":["components/Header.js","components/Main.js","components/App.js","components/users.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","react_default","a","createElement","Component","axios","defaults","headers","common","Main","deleteItem","key","itemId","setState","posts","filter","data","index","id","post","_this2","method","url","then","res","console","log","showData","App","Container","components_Header","components_Main","Users","get","postss","window","location","hostname","map","ButtonToolbar","Button","variant","React","Boolean","match","routing","react_router_dom","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAyBeA,qBAlBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,MAAM,IAHQR,wEASf,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uCAbSC,+BCErBC,IAAMC,SAASC,QAAQC,OAAO,oBAAsB,qBAgErCC,cA5DX,SAAAA,EAAYlB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,IAEfjB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgB,GAAAX,KAAAH,KAAMJ,KAiCVmB,WAAa,SAACC,GACV,IAAIC,EACJpB,EAAKqB,SAAS,CACVC,MAAOtB,EAAKO,MAAMe,MAAMC,OAAO,SAACC,EAAKC,GAEjC,OADAL,EAASI,EAAKE,GACPD,IAASN,MAIxBN,IAAMc,KAAK,kCAAkCP,IAzC7CpB,EAAKO,MAAQ,CACTe,MAAO,IAJItB,mFASA,IAAA4B,EAAAzB,KAEfU,IAAM,CACFgB,OAAQ,MACRC,IAAK,iCAERC,KAAK,SAAAC,GACFC,QAAQC,IAAIV,GACZ,IAAIA,EAAQQ,EAAIR,KAChBI,EAAKP,SAAS,CAAEC,MAAQE,uCAiC5B,OACIf,EAAAC,EAAAC,cAAA,WACMR,KAAKgC,mBAvDJvB,qBCeJwB,mLAfX,OAEI3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAD,cAPQ3B,6BCsCH4B,cAtCX,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACfxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KACDQ,MAAQ,CACXe,MAAO,IAHMtB,mFAQE,IAAA4B,EAAAzB,KACjBU,IAAM4B,IAAI,6BACTV,KAAK,SAAAC,GACF,IAAMU,EAASV,EAAIR,KACnBS,QAAQC,IAAIQ,GACZT,QAAQC,IAAIS,OAAOC,SAASC,UAC5BjB,EAAKP,SAAS,CAAEC,MAAMoB,uCAQ1B,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,UACGR,KAAKI,MAAMe,MAAMwB,IAAI,SAAAnB,GAAI,OACxBlB,EAAAC,EAAAC,cAAA,MAAIQ,IAAKQ,EAAKD,IAAKC,EAAKnB,UAI5BC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACItC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQC,QAAQ,UAAhB,wBAlCIC,IAAMtC,WCQNuC,QACW,cAA7BR,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASO,MACvB,2DCVN,IAAMC,EACF5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC3B,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWlB,MAMxCmB,IAASC,OAAOP,EAASQ,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.6d82e91e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport {Button,ButtonGroup,Dropdown,DropdownButton, Container} from 'react-bootstrap';\r\n\r\nclass Header extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n         title:'',\r\n        }\r\n        \r\n      }\r\n      \r\n      render() {\r\n        return (\r\n          <div>\r\n            <h1> Sean bienvenidos</h1>\r\n          </div>\r\n        )\r\n      }\r\n\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nimport { Button, ButtonGroup, Dropdown, DropdownButton, Container } from 'react-bootstrap';\r\n\r\naxios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            posts: [],\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        axios({\r\n            method: 'get',\r\n            url: 'https://www.imviczz.com/ajax',\r\n          })\r\n        .then(res => {\r\n            console.log(data)\r\n            let data = (res.data);\r\n            this.setState({ posts:  data });\r\n        });\r\n    }\r\n\r\n    /* showData(){\r\n        var items = this.state.posts.map((data,i) => {\r\n            return <li key={data.id}>{data.title}\r\n            <button onClick={()=>this.deleteItem(i)} > Borrar</button>\r\n            </li>;\r\n        })\r\n        return(\r\n            \r\n            <div> {items} </div>\r\n\r\n        )\r\n    } */\r\n\r\n    deleteItem = (key) =>{\r\n        var itemId;\r\n        this.setState({\r\n            posts: this.state.posts.filter((data,index) => {\r\n                itemId = data.id;\r\n                return index!== key;\r\n            })\r\n        }) \r\n\r\n        axios.post('https://www.imviczz.com/delete/'+itemId);\r\n        \r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.showData() }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Header from './Header'\r\nimport Main from './Main'\r\nimport {Container} from 'react-bootstrap';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      \r\n        <Container>\r\n          <Header />\r\n          <Main  />\r\n        </Container>\r\n      \r\n    );\r\n  }\r\n\r\n  \r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\n\r\nclass Users extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          posts: []\r\n        }\r\n        \r\n      }\r\n\r\n      componentDidMount(){\r\n        axios.get('http://wallaze.local/ajax')\r\n        .then(res => {\r\n            const postss = res.data;\r\n            console.log(postss);\r\n            console.log(window.location.hostname)\r\n            this.setState({ posts:postss  });\r\n        });\r\n        }\r\n    \r\n      render() {\r\n      \r\n        \r\n    \r\n        return (\r\n          <div>\r\n            <h1>{`/r/Saludaciones`}</h1>\r\n            <ul>\r\n              {this.state.posts.map(post =>\r\n                <li key={post.id}>{post.title}</li>\r\n              )}\r\n            \r\n            </ul>\r\n            <ButtonToolbar>\r\n                <Button variant=\"danger\"> Hago cosas</Button>\r\n            </ButtonToolbar>\r\n          </div>\r\n        );\r\n      }\r\n}\r\nexport default Users","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './components/App'\r\nimport Users from './components/users'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst routing = (\r\n    <Router>\r\n      <div>\r\n        <Route exact path=\"/\" component={App} />\r\n        <Route path=\"/users\" component={Users} />\r\n      </div>\r\n    </Router>\r\n  )\r\n\r\n\r\nReactDOM.render(routing, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}